
标准io
1. 文件流(FILE)
	已打开文件的标志
2. fopen(3)
	打开方式: r r+ w w+ a a+	
3. 读写文件
	fgetc(3); / fputc(3);
	getc(3); putc(3);
	getchar(3)

	fgets(3) / fputs(3);

	fread(3) / fwrite(3)
4. 定位流
	fseek(3);--->成功返回0
	SEEK_SET 开头
	SEEK_CUR 当前
	SEEK_END 末尾
	
	rewind(3); ===> fseek(stream, 0, SEEK_SET);
	ftell(stream);	
5. 关闭
	fclose(3);
6. 标准输入(stdin) / 标准输出(stdout) / 标准错误输出(stderr)
7. 缓冲
	标准io有缓存区
	作用:合并系统调用,提供程序的效率
	方式:
		行缓存: stdin stdout
		无缓存: stderr
		全缓存: 默认大小4k
	刷新缓存区:
		fflush(3);	
8. 临时文件
	tmpfile(3);
	文件关闭或者进程结束文件就自动删除了


文件io
1. 文件描述符
	非负整型(0~1023)
	已打开文件的标志

2. io函数
	open(2);
		必选三选一:O_RDONLY O_WRONLY O_RDWR
		可选:O_APPEND O_CREAT O_TRUNC
	read(2) / write(2);
	lseek(2); --->返回值是当前文件偏移量
		空洞文件
	close(2);

3. 文件共享
	dup(2);
	dup2(2);
	> 2> 2>&1	

4. 原子操作
	不可分割
		open(2); dup2(2);

文件和目录
1. stat(2)
	struct stat res
	<1>.st_mode & S_IFMT--->类型
		- regular
		d directory
		l link
		p pipe
		c charactor
		b block
		s socket
	<2>.st_mode & ~S_IFMT--->权限
		u g o
		rwx
		u+s
		g+s
		o+t
	<3>.st_nlink 硬链接个数
	<4>.st_uid .st_gid	
		getpwuid(3)--->struct passwd--->pw_name
		getgrgid(3)--->struct group--->gr_name
	<5>.st_size 文件字节个数
		!= 所占磁盘空间大小(st_blocks)
	<6>.st_mtim .st_atim .st_ctim
		localtime(3)
		strftime(3)
		time(2)

2. getopt(3)
	optstring:
		./a.out /etc -lhello --help	 -a
		/etc非选项参数
		-l带参数选项
		--help长格式选项
		-a不带参数的选项
		"-l:a"
	getopt_long(3);
		struct option
			name--->长格式名字
			val--->指定返回值
3.读目录
	opendir(3)---->DIR
	readdir(3)---->struct dirent
	closedir(3)

	glob(3)

进程环境
1.main函数是由内核中函数调用类似于
exit(main());
ｃ启动例程

2. 进程终止
	5种正常:
		<1>main return
		<2>exit(3)
		<3>_exit(2) / _Exit(2);
		<4>最后一个线程调用pthread_exit(3)
		<5>最后一个线程从启动例程返回
	3种异常终止:
		<1>abort(3)
		<2>最后一个线程对取消做出响应
		<3>信号终止

3. c存储空间布局
4. 动态开辟
	malloc(3)
	calloc(3)
	realloc(3)
	free(3)　
	动态库　静态库
5. 环境变量和环境表
	char **environ;
	"name=value"
6. setjmp(3) / longjmp(3);

进程控制
1. 进程标识
	pid_t 非负整型
	getpid(2)
	getppid(2)
2. 创建
	fork(2);
	通过复制父进程，包括虚拟地址空间
	copy-on-write
	fork创建子进程和父进程有什么不同:
		<1>pid
		<2>ppid
		<3>资源占用率清空
		<4>flock(2)文件锁不继承
	用途:
		<1>网络模型
		<2>shell
	vfork(2) 与 fork(2)不同:
		<1>vfork(2)创建的子进程会阻塞父进程
		<2>共享存储空间
2. 收尸
	wait(2); 任意子进程
	waitpid(2);
		pid是第一个参数
		pid < -1:
			进程组id等于pid绝对值的组内任意子进程收尸
		pid == -1:
			任意子进程
		pid == 0:
			与调用进程在同一个进程组内的任意子进程收尸
		pid > 0:
			进程号是pid的子进程收尸
		
3. 进程替换
	execl(3);
	execlp(3);
	execv(3);
	execvp(3);

4. system(3);

进程关系
	会话承载进程组
	进程组承载进程
	会话中第一个进程组内的第一个进程就是会话组长，进程组组长
	getsid(2);
	getpgid(2);
	getpgrp(2);
	setpgid(2);

守护进程
	pid == pgid == sid 脱离控制终端
	编程规则:
		<1>umask(0)
		<2>fork() 父进程exit(0)
		<3>子进程调用setsid(2)
		<4>chdir("/");	
		<5> fd = open("/dev/null");
			dup2(fd, 0)
			dup2(fd, 1)
			dup2(fd, 2)
	daemon(3);
	单实例守护进程:
		进程同时只能运行一次
		flock(2);--->LOCK_EX|LOCK_NB
		"/var/run/daemon.pid"
	日志:
		openlog();
		syslog();
		closelog();

信号:
	标准信号和实时信号
	标准:1~31
	实时:34~64
标准信号:
	默认行为:
		<1> Term
		<2> Core
		<3> Stop
		<4> Cont
		<5> Ign
	如何产生:
		keyborad--->
			ctrl+c  SIGINT
			ctrl+\	SIGQUIT
			ctrl+z	SIGSTOP
		alarm(2)--->SIGALRM setitimer(2);
		kill(2);
	等待信号到来:
		pause(2);
		sigsuspend(2);
	改变信号行为:
		sigaction(2);
		struct sigaction {
			sa_handler;// 信号处理函数
			sa_mask;//信号处理函数调用期间的信号屏蔽字
			sa_flags; 
		};
	信号集:
		sigset_t	
		sigemptyset(3);
		sigfillset(3);
		sigaddset(3);
		sigdelset(3);
		sigismember(3);
	设置进程的信号屏蔽字: (mask位图)
		sigpromask(2);
	信号的响应过程:
		<1>丢失
		<2>信号处理函数中不能用longjmp跳转，用siglongjmp(2)
		<3>打断阻塞的系统调用:
			阻塞的系统调用函数需要判断是否有假错

		<4>信号的相应过程是嵌套的
		<5>在信号处理函数中使用可重入函数
	应用:
		流量控制:
			令牌桶模型:
				令牌　上限　速率		

线程
	独立运行的函数
	线程标识:pthread_t
	pthread_self(3);
	pthread_eqaul(3);
	
	创建
		pthread_create(3);
	终止
		return 
		pthread_exit(3);
		被cancel
	收尸
		pthread_join(3);	
	取消
		pthread_cancel(3);
		when / whether
		when--->type
			asynchronous
			deferred(default)
		whether
			enabled(default)
			disabeled
		pthread_testcancel(3);

		pthread_cleanup_push(3);
		pthread_cleanup_pop(3);
	属性:
		分离属性
		pthread_detach(3);

	同步
		pthread_mutex_t 
		pthread_mutex_init(3);
		pthread_mutex_lock(3);
		pthread_mutex_unlock(3);
		pthread_mutex_destroy(3);

		条件变量
		pthread_cond_t
		pthread_cond_init(3);
		pthread_cond_signal(3);
		pthread_cond_broadcast(3);
		pthread_cond_wait(3);
		pthread_cond_destroy(3);
	动态线程池		
		优势:减少服务端随着任务量增加频繁创建销毁线程的开销
			能保证接收到任务，有一部分线程可以立即处理
		数据类型:
			任务队列
			池管理线程
			任务线程数据结构
	与信号:
		pthread_kill(3);
		pthread_sigwait(3);
		pthread_sigmask(3);
	同一个进程环境中的多个线程:
		独立:
			栈
			tid
		共享:
			data heap-->全局的
			pid
			ppid
			sid
			pgid
			信号的行为
	与io:
		pread(3); / pwrite(3);

高级io
	非阻塞、io多路转接、记录锁、存储映射io
	非阻塞:
		open(2);---->O_NONBLOCK
		fcntl(2); 
	编程模型
		有限状态机
			现态--->条件--->次态
		推动状态机
	io多路转接
		select(2);
			个数有限
			监视事件和返回事件在同一个集合
		poll(2);
			结构体
			监视事件和返回事件是不同变量
		epoll(7)
			仅限于linux
	存储映射io:
		mmap(2);


